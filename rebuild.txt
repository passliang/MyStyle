why to  rebuild 
	1.改进软件设计2.使软件易于理解3.帮助找到bug4.提高编程速度 
when to rebuild  
	1.三次法则（第一次做某件事只管去做;第二次做类似的事，虽然有点不爽还可以去做，第三次在做类似的就应该重构）
	2.添加功能时rebuild 
	3.修补错误时
	4.复审代码时（你或者别人第二次阅读）
代码坏味道-------	
	1.重复代码
	2.过长函数
	3.过大的类
	4.过长参数列
	5.发散式变化（因为不同原因在不同方向变化，例如 炊烟）
	6.散弹式修改（改一发而动全身，多个小地方）
	7.依恋情节（过分依赖型）
	8.数据泥团（减少字段和参数的个数 ）
	9.基本类型偏执（对象）
	10.switch 语句
	11.平行继承体系 （改一发而动全身，多个小地方） 特殊提前  多个地方需要修改重复的东西 改了一个 别的也得改动
	12.冗赘类（多余的）
	13.夸夸其谈未来性（考虑到未来发生的  而添加一波代码 ）
	14.令人迷惑的占时字段 （用意不请的字段）
	15.过度耦合的消息链
	16.中间人（让真正干某件事的人 来做事 不能过度使用第三者 来代替某件事）
	17.狎昵关系（太过于亲密）
	18.异曲同工的类（多个方法 类处理同一个事情）
	19.不完美的库类
	20.纯质的数据类 （DTO vo）
	21.被拒绝的馈赠 (不想重写全部实现)
	22.过多的注释
	
rebuild 前提 完整的测试体系	
		1.自测代码（有误bug） 例如添加一波测试 测试类 进行测试 单元测试 ---功能测试 （观察类该做的所有事情，然后针对任何一个功能
		·的任何一种可能失败的情况，进行测试）
		
重构列表
	
	1.重构记录格式  
		1.name 重构词汇表
		2.简短概要
			2.1一句话介绍rebuild 能够帮助解决的问题2.2一段简要描述，介绍该做的事情2.3一副速写图，简单展示重构前后示例
		3.动机（为毛需要rebuild  为毛不需要）
		4.范例（demo 没有什么比来个demo更爽的了）
	
	2.寻找引用点（代码在哪使用）
	3.重构手法（会使用到不仅仅一种的设计模式）

重新组织函数
	1.方法抽取（问题点，变量，临时变量，局部变量）
		1.1命名（功能行来命名）1.2
	2.内联函数
		2.1检查，确保函数不具有多态性2.2查找所有调用点3.将被调用点替换为函数本体4.编译，测试5.删除该函数定义
	3.内联临时变量
		将所有对变量的引用动作，替换为对它赋值的那个表达式自身
		3.1检查赋值语句确保左右两边成立3.2声明为final 3，找到所有引用点 替换为临时变量表达式4，修改，编译，测试5.删除该函数定义
	4.用查询取代临时变量
		4.1找出只被赋值一次的临时变量4.2声明变量为final 3.编译4.对临时变量赋值的函数提炼到一个独立函数中5.编译，测试
	5.引入解释行变量
		5.1声明final临时变量 将待分解的表达式一部分动作的运算结果赋值给它5.2将表达式的这一部分 替换为上述临时变量3.重复
	6.分解临时变量
		6.1在待分解临时变量的声明及第一个被赋值处，修改名称2.声明该变量为final 3.以该临时变量的第二次赋值动作为界,修改此前对该临时变量的所有引用点，让他们引用新的临时变量
		4.在第二次赋值处，重新声明原先那个变量 5.编译 测试  重复这个过程
	7.移除对参数的赋值
		7.1建立临时变量，将待处理参数赋值给它2."已对参数赋值"为界，将其后所有对此参数引用点替换为改临时变量的引用
		3.修改赋值语句，使其修为新建临时变量赋值 4.编译 测试
	8.以函数对象取代函数
		8.1为某函数建立类，并以函数功能命名2.在此类中保存改函数的临时变量以及参数3.建立构造函数,接收源对象及原函数所有参数作为参数
		4.新建函数compute()，并将之前函数内容放到里面。如果需要调用源对象的任何函数，通过原函数的字段调用 5.编译6.创建上述新类的对象，并调用compute()方法
	9.替换算法
对象之间搬移特性
	1.搬移函数
		1.检查源类中被源函数所使用的一切的特性（字段和函数）考虑是否要搬移2.检查源类的子类和超类，是否有函数的其他声明
		3.在目标类中声明这个函数4.将源函数复制到目标函数。调整后者，使其能在新加重正常运行4.编译目标类
		5.决定怎么从源函数正确引用目标对象6.修改源函数，使之成为一个纯委托函数7.编译测试
		8.决定是否删除源函数或者保留为一个委托函数9.如果移除源函数，将源函数引用替换为对目标函数的调用10，编译测试
	2.搬迁字段
		使用:在目标类新建一个字段，修改原字段所有用户，令他们改用新字段
		1.如果字段访问级别为public 先把该字段封装起来2.编译，测试3.在目标类中建立与源类相同的字段，并建立相应的取值设值函数
		4.编译目标类5.决定怎么引用目标对象6.删除源字段7.替换所有源字段的引用8编译，测试
	3.提炼类
		1.决定如何分解类所负的责任2.建立新类 用于表现从旧类分离的责任3.建立从旧类访问新类的连接关系4.对于相搬移的字段 使用搬移字段方法搬移5.搬移后编译测试6.使用搬移方法将必要的函数搬移到新类。先搬移较低层函数（被调用次数多余调用其他函数）
		在搬移较高层函数7.搬移之后编译测试8.检查精简每个类的接口9.决定是否公开新类如果需要公开 决定使他成为引用对象还是不可变值对象
	4.将类内联化
		1.在目标类身上声明源类的public协议 并将其中所有函数委托至源类2.修改源类引用点 修改为目标类 3.编译测试4.将源类的特性（方法属性）都搬移到目标类
	5.隐藏委托关系
		1.对于一个委托关系函数，现在服务对象建立简单的委托函数 2.调整 使他只调用服务对象提供的函数 3编译测试 4.
		不再有任何用户需要委托者的函数 那就删除掉 
	6.移除中间人
	  
	  
	
	
	
	
	
JAVA Metrics 度量工具使用介绍
转载: http://blog.csdn.net/scutshuxue/article/details/8350135 http://koven2049.iteye.com/blog/968143 h ...

JAVA Metrics度量工具 - Metrics Core 翻译
Metrics核心 翻译自Metrics官方文档: http://metrics.codahale.com/manual/core/ JAVA Metrics是一个用于度量的一个JAVA的类库,使用请 ...

Java XML解析工具 dom4j介绍及使用实例
Java XML解析工具 dom4j介绍及使用实例 dom4j介绍 dom4j的项目地址:http://sourceforge.net/projects/dom4j/?source=directory ...

代码度量工具——SourceMonitor的学习和使用
http://www.cnblogs.com/bangerlee/archive/2011/09/18/2178172.html 引言 我们提倡编写功能单一.结构清晰.接口简单的函数,因为过于复杂的函 ...

Metrics-Java版的指标度量工具介绍 Metrics是一个给JAVA服务的各项指标提供度量工具的包,在JAVA代码中嵌入Metrics代码,可以方便的对业务代码的各个指标进行监控,同时,Metrics能够很好的跟Ganlia.Gra ...

Metrics-Java版的指标度量工具之一
Metrics是一个给JAVA服务的各项指标提供度量工具的包,在JAVA代码中嵌入Metrics代码,可以方便的对业务代码的各个指标进行监控,同时,Metrics能够很好的跟Ganlia.Graphi ...

Metrics-Java版的指标度量工具之二
接上<Metrics-Java版的指标度量工具之一> 4.       Histograms Histograms主要使用来统计数据的分布情况,最大值.最小值.平均值.中位数,百分比(75 ...

Java 性能分析工具 , 第 3 部分: Java Mission Control
引言 本文为 Java 性能分析工具系列文章第三篇,这里将介绍如何使用 Java 任务控制器 Java Mission Control 深入分析 Java 应用程序的性能,为程序开发人员在使用 Jav ...

Java 性能分析工具 , 第 2 部分：Java 内置监控工具
引言 本文为 Java 性能分析工具系列文章第二篇,第一篇:操作系统工具.在本文中将介绍如何使用 Java 内置监控工具更加深入的了解 Java 应用程序和 JVM 本身.在 JDK 中有许多内置的工 ...
		
	
Kent Beck say "我不是个伟大的程序员，我只是个有个有些一些优秀习惯的好程序员"